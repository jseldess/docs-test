"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6195],{5613:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>o});var i=a(5893),t=a(1151);const d={title:"Manage data",category:"6495c32609a24b00434e5b53"},r=void 0,s={id:"data/manage-data",title:"Manage data",description:"In addition to inserting and querying data, there are other ways you can interact with vector data in a Pinecone index. This section walks through the various vector operations available.",source:"@site/docs/data/manage-data.md",sourceDirName:"data",slug:"/data/manage-data",permalink:"/docs/./data/manage-data",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data/manage-data.md",tags:[],version:"current",frontMatter:{title:"Manage data",category:"6495c32609a24b00434e5b53"},sidebar:"examplesSidebar",previous:{title:"Insert data",permalink:"/docs/./data/insert-data"},next:{title:"Filtering with metadata",permalink:"/docs/./data/metadata-filtering"}},c={},o=[{value:"Create a client instance",id:"create-a-client-instance",level:2},{value:"Specify an index endpoint",id:"specify-an-index-endpoint",level:2},{value:"Call <code>whoami</code> to retrieve your project id.",id:"call-whoami-to-retrieve-your-project-id",level:3},{value:"Describe index statistics",id:"describe-index-statistics",level:2},{value:"Fetching records",id:"fetching-records",level:2},{value:"Updating records",id:"updating-records",level:2},{value:"Full update",id:"full-update",level:3},{value:"Partial update",id:"partial-update",level:3},{value:"Deleting records",id:"deleting-records",level:2},{value:"Delete records by ID",id:"delete-records-by-id",level:3},{value:"Delete records by namespace",id:"delete-records-by-namespace",level:3},{value:"Delete records by metadata",id:"delete-records-by-metadata",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In addition to ",(0,i.jsx)(n.a,{href:"insert-data",children:"inserting"})," and ",(0,i.jsx)(n.a,{href:"query-data",children:"querying"})," data, there are other ways you can interact with vector data in a Pinecone index. This section walks through the various vector operations available."]}),"\n",(0,i.jsx)("html",{children:(0,i.jsx)("iframe",{width:"450",height:"253",src:"https://www.youtube.com/embed/cqzWyNWU8oo",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-client-instance",children:"Create a client instance"}),"\n",(0,i.jsx)(n.p,{children:"If you're using a Pinecone client library to access an index, you'll need to create a client instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import pinecone\n\npinecone.init(api_key="YOUR_API_KEY", environment="YOUR_ENVIRONMENT")\nindex = pinecone.Index("pinecone-index")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import { Pinecone } from \'@pinecone-database/pinecone\'\n\nconst pinecone = new Pinecone({\n  apiKey: "YOUR_API_KEY",\n  environment: "YOUR_ENVIRONMENT"\n})\nconst index = pinecone.index("pinecone-index")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:"# Not applicable\n"})}),"\n",(0,i.jsx)(n.h2,{id:"specify-an-index-endpoint",children:"Specify an index endpoint"}),"\n",(0,i.jsx)(n.p,{children:"Pinecone indexes each have their own DNS endpoint. For cURL and other direct\nAPI calls to a Pinecone index, you'll need to know the dedicated endpoint for\nyour index."}),"\n",(0,i.jsx)(n.p,{children:"Index endpoints take the following form:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$INDEX_NAME"})," is the name you gave your index when you created it."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$PINECONE_PROJECT_ID"})," is the Pinecone project id that your API key is associated\nwith. This can be retrieved using the ",(0,i.jsx)(n.code,{children:"whoami"})," operation below."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"$PINECONE_ENVIRONMENT"})," is the ",(0,i.jsx)(n.a,{href:"projects#project-environment",children:"cloud region for your Pinecone project"}),".."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"call-whoami-to-retrieve-your-project-id",children:["Call ",(0,i.jsx)(n.code,{children:"whoami"})," to retrieve your project id."]}),"\n",(0,i.jsx)(n.p,{children:"The following command retrieves your Pinecone project id."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"pinecone.whoami()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:"PINECONE_ENVIRONMENT='your-environment'\nPINECONE_API_KEY='your-api-key'\n\ncurl \"https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami\" \\\n    -H \"Api-Key: $PINECONE_API_KEY\"\n"})}),"\n",(0,i.jsx)(n.h2,{id:"describe-index-statistics",children:"Describe index statistics"}),"\n",(0,i.jsx)(n.p,{children:"Get statistics about an index, such as record count per namespace:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"index.describe_index_stats()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const indexStats = await index.describeIndexStats();\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:"PINECONE_ENVIRONMENT='your-environment'\nPINECONE_API_KEY='your-api-key'\nINDEX_NAME='index-name'\n\nPINECONE_PROJECT_ID=$(\n  curl \"https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami\" \\\n    -H \"Api-Key: $PINECONE_API_KEY\" | jq -r '.project_name'\n)\n\ncurl \"https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/describe_index_stats\" \\\n  -H \"Api-Key: $PINECONE_API_KEY\"\n"})}),"\n",(0,i.jsx)(n.h2,{id:"fetching-records",children:"Fetching records"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Fetch"})," operation looks up and returns records, by id, from an index. The returned records include the vector values and/or metadata. Typical fetch latency is under 5ms."]}),"\n",(0,i.jsx)(n.p,{children:"Fetch records by their ids:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"index.fetch([\"id-1\", \"id-2\"])\n\n# Returns:\n# {'namespace': '',\n#  'vectors': {'id-1': {'id': 'id-1',\n#                       'values': [0.568879, 0.632687092, 0.856837332, ...]},\n#              'id-2': {'id': 'id-2',\n#                       'values': [0.00891787093, 0.581895, 0.315718859, ...]}}}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const fetchResult = await index.fetch(['id-1', 'id-2']);\n// Returns:\n// {'namespace': '',\n//  'records': {'id-1': {'id': 'id-1',\n//                       'values': [0.568879, 0.632687092, 0.856837332, ...]},\n//              'id-2': {'id': 'id-2',\n//                       'values': [0.00891787093, 0.581895, 0.315718859, ...]}}}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'PINECONE_ENVIRONMENT=\'your-environment\'\nPINECONE_API_KEY=\'your-api-key\'\nINDEX_NAME=\'index-name\'\n\nPINECONE_PROJECT_ID=$(\n  curl "https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami" \\\n    -H "Api-Key: $PINECONE_API_KEY" | jq -r \'.project_name\'\n)\n\ncurl "https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/fetch?ids=id-1&ids=id-2" \\\n  -H "Api-Key: $PINECONE_API_KEY"\n# Output:\n# {\n#   "vectors": {\n#     "id-1": {\n#       "id": "id-1",\n#       "values": [0.568879, 0.632687092, 0.856837332, ...]\n#     },\n#     "id-2": {\n#       "id": "id-2",\n#       "values": [0.00891787093, 0.581895, 0.315718859, ...]\n#     }\n#   },\n#   "namespace": ""\n# }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"updating-records",children:"Updating records"}),"\n",(0,i.jsxs)(n.p,{children:["There are two methods for updating records and metadata, using ",(0,i.jsx)(n.em,{children:"full"})," or ",(0,i.jsx)(n.em,{children:"partial"})," updates."]}),"\n",(0,i.jsx)(n.h3,{id:"full-update",children:"Full update"}),"\n",(0,i.jsxs)(n.p,{children:["Full updates modify the entire record, including vector values and metadata. Updating a record by id is done the same way as ",(0,i.jsx)(n.a,{href:"insert-data",children:"inserting records"}),". (Write operations in Pinecone are ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Idempotence",children:"idempotent"}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Upsert"})," operation writes records into an index."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u2139\ufe0f Note"}),"\n",(0,i.jsx)(n.p,{children:"If a new value is upserted for an existing vector id, it will overwrite the\nprevious value."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Update the value of the record ",(0,i.jsx)(n.code,{children:'("id-3", [3.3, 3.3])'}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'index.upsert([("id-3", [3.3, 3.3])])\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await index.upsert([\n  { id: '3', values: [3.3, 3.3] }\n]);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'INDEX_NAME=\'index-name\'\nPINECONE_ENVIRONMENT=\'your-environment\'\nPINECONE_API_KEY=\'your-api-key\'\n\nPINECONE_PROJECT_ID=$(\n  curl "https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami" \\\n    -H "Api-Key: $PINECONE_API_KEY" | jq -r \'.project_name\'\n)\n\ncurl -X POST "https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/upsert" \\\n  -H "Api-Key: $PINECONE_API_KEY" \\\n  -d \'{\n    "vectors": [\n      {\n        "id": "id-3",\n        "values": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n      }\n    ]\n  }\'\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Fetch the record again. We should get ",(0,i.jsx)(n.code,{children:'("id-3", [3.3, 3.3])'}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'index.fetch(["id-3"])\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await index.fetch(['id-3']);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:"INDEX_NAME='index-name'\nPINECONE_ENVIRONMENT='your-environment'\nPINECONE_API_KEY='your-api-key'\n\nPINECONE_PROJECT_ID=$(\n  curl \"https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami\" \\\n    -H \"Api-Key: $PINECONE_API_KEY\" | jq -r '.project_name'\n)\n\ncurl \"https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/fetch?ids=id-3\" \\\n  -H \"Api-Key: $PINECONE_API_KEY\"\n"})}),"\n",(0,i.jsx)(n.h3,{id:"partial-update",children:"Partial update"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Update"})," operation performs partial updates that allow changes to ",(0,i.jsx)(n.em,{children:"part"})," of a record. Given an ID, we can update the vector value with the ",(0,i.jsx)(n.code,{children:"values"})," argument or update metadata with the ",(0,i.jsx)(n.code,{children:"set_metadata"})," argument."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u26a0\ufe0f Warning"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Update"})," operation does not validate the existence of ids within an\nindex. If a non-existent id is given then no changes are made and a ",(0,i.jsx)(n.code,{children:"200 OK"}),"\nwill be returned."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To update the vector values of record ",(0,i.jsx)(n.code,{children:'("id-3", [3.0, 3.0], {"type": "doc", "genre": "drama"})'}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'index.update(id="id-3", values=[4.0, 2.0])\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await index.update({\n  id: 'id-3',\n  values: [4.0, 2.0]\n});\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'INDEX_NAME=\'index-name\'\nPINECONE_ENVIRONMENT=\'your-environment\'\nPINECONE_API_KEY=\'your-api-key\'\n\nPINECONE_PROJECT_ID=$(\n  curl "https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami" \\\n    -H "Api-Key: $PINECONE_API_KEY" | jq -r \'.project_name\'\n)\n\ncurl -X POST "https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/update" \\\n  -H "Api-Key: $PINECONE_API_KEY" \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n      "id": "id-3",\n      "values": [\n          4.0,\n          2.0\n      ]\n    }\'\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The updated record would now be ",(0,i.jsx)(n.code,{children:'("id-3", [4.0, 2.0], {"type": "doc", "genre": "drama"})'}),". Values have been updated but the metadata is unchanged."]}),"\n",(0,i.jsx)(n.p,{children:"When updating metadata only specified fields will be modified. If a specified field does not exist, it is added."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u2139\ufe0f Note"}),"\n",(0,i.jsxs)(n.p,{children:["Metadata updates apply ",(0,i.jsx)(n.em,{children:"only"})," to fields passed to the ",(0,i.jsx)(n.code,{children:"set_metadata"}),"\nargument. Any other fields will remain unchanged."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To update the metadata of record ",(0,i.jsx)(n.code,{children:'("id-3", [4.0, 2.0], {"type": "doc", "genre": "drama"})'}),", use code like the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'index.update(id="id-3", set_metadata={"type": "web", "new": True})\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"# Update the metadata\nawait index.update({\n  id: 'id-3',\n  metadata: {\n    type: \"web\",\n    new: true,\n  },\n});\n\n# View the updated results\nconst fetchResults = await index.fetch(['id-3'])\nconsole.log(fetchResults.records['id-3'])\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'INDEX_NAME=\'index-name\'\nPINECONE_ENVIRONMENT=\'your-environment\'\nPINECONE_API_KEY=\'your-api-key\'\n\nPINECONE_PROJECT_ID=$(\n  curl "https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami" \\\n    -H "Api-Key: $PINECONE_API_KEY" | jq -r \'.project_name\'\n)\n\n# Update the metadata\ncurl -X POST "https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/update" \\\n  -H "Api-Key: $PINECONE_API_KEY" \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n      "id": "id-3",\n      "setMetadata": {\n          "type": "web",\n          "new": true\n      }\n    }\'\n\n# Fetch the record to view the results of the update\ncurl "https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/fetch?ids=id-3" \\\n  -H "Api-Key: $PINECONE_API_KEY"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The updated record would now be ",(0,i.jsx)(n.code,{children:'("id-3", [4.0, 2.0], {"type": "web", "genre": "drama", "new": true})'}),". The ",(0,i.jsx)(n.code,{children:"type"})," metadata field has been updated to ",(0,i.jsx)(n.code,{children:"web"}),", the ",(0,i.jsx)(n.code,{children:"new"})," property has been added with value ",(0,i.jsx)(n.code,{children:"true"}),", and the ",(0,i.jsx)(n.code,{children:"genre"})," property has been unchanged."]}),"\n",(0,i.jsxs)(n.p,{children:["Both vector and metadata can be updated at once by including both ",(0,i.jsx)(n.code,{children:"values"})," and metadata arguments. To update both these parts of the ",(0,i.jsx)(n.code,{children:'"id-3"'})," record we write:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'index.update(id="id-3", values=[1.0, 2.0], set_metadata={"type": "webdoc"})\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await index.update({\n  id: 'id-3',\n  values: [1.0, 2.0],\n  metadata: {\n    type: \"webdoc\",\n  },\n});\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'INDEX_NAME=\'index-name\'\nPINECONE_ENVIRONMENT=\'your-environment\'\nPINECONE_API_KEY=\'your-api-key\'\n\nPINECONE_PROJECT_ID=$(\n  curl "https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami" \\\n    -H "Api-Key: $PINECONE_API_KEY" | jq -r \'.project_name\'\n)\n\n# Update both values and metadata\ncurl -X POST "https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/update" \\\n  -H "Api-Key: $PINECONE_API_KEY" \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n        "id": "id-3",\n        "values": [1.0, 2.0],\n        "setMetadata": {"type": "webdoc"}\n      }\'\n\n# Fetch the record to view the results of the update\ncurl "https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/fetch?ids=id-3" \\\n  -H "Api-Key: $PINECONE_API_KEY"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The updated record would now be ",(0,i.jsx)(n.code,{children:'("id-3", [1.0, 2.0], {"type": "webdoc", "genre": "drama", "new": true})'}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"deleting-records",children:"Deleting records"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Delete"})," operation deletes records from an index."]}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, it can also delete all records from an index or ",(0,i.jsx)(n.a,{href:"namespaces",children:"namespace"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"When deleting large numbers of records, limit the scope of delete operations to hundreds of records per operation."}),"\n",(0,i.jsxs)(n.p,{children:["Instead of deleting all records in an index, ",(0,i.jsx)(n.a,{href:"https://www.pinecone.io/docs/manage-indexes/#deleting-an-index",children:"delete the index"})," and ",(0,i.jsx)(n.a,{href:"https://www.pinecone.io/docs/manage-indexes/#creating-an-index",children:"recreate it"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"delete-records-by-id",children:"Delete records by ID"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'index.delete(ids=["id-1", "id-2"], namespace=\'example-namespace\')\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const ns = index.namespace('example-namespace')\n// Delete one record by ID.\nawait ns.deleteOne('id-1');\n// Delete more than one record by ID.\nawait ns.deleteMany(['id-2', 'id-3']);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:"INDEX_NAME='index-name'\nPINECONE_ENVIRONMENT='your-environment'\nPINECONE_API_KEY='your-api-key'\n\nPINECONE_PROJECT_ID=$(\n  curl \"https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami\" \\\n    -H \"Api-Key: $PINECONE_API_KEY\" | jq -r '.project_name'\n)\n\ncurl -X POST \"https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/delete?ids=id-1&ids=id-2&namespace=example-namespace\" \\\n  -H \"Api-Key: $PINECONE_API_KEY\" \n"})}),"\n",(0,i.jsx)(n.h3,{id:"delete-records-by-namespace",children:"Delete records by namespace"}),"\n",(0,i.jsxs)(n.p,{children:["To delete all records from a namespace, specify the appropriate parameter for your client and provide a\n",(0,i.jsx)(n.code,{children:"namespace"})," parameter."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u2139\ufe0f Note"}),"\n",(0,i.jsx)(n.p,{children:"If you delete all records from a single namespace, it will also delete the\nnamespace."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"index.delete(delete_all=True, namespace='example-namespace')\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await index.namespace('example-namespace').deleteAll();\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",metastring:"curl",children:"INDEX_NAME='index-name'\nPINECONE_ENVIRONMENT='your-environment'\nPINECONE_API_KEY='your-api-key'\n\nPINECONE_PROJECT_ID=$(\n  curl \"https://controller.$PINECONE_ENVIRONMENT.pinecone.io/actions/whoami\" \\\n    -H \"Api-Key: $PINECONE_API_KEY\" | jq -r '.project_name'\n)\n\ncurl -X POST \"https://$INDEX_NAME-$PINECONE_PROJECT_ID.svc.$PINECONE_ENVIRONMENT.pinecone.io/vectors/delete?deleteAll=true&namespace=example-namespace\" \\\n  -H \"Api-Key: $PINECONE_API_KEY\" \n"})}),"\n",(0,i.jsx)(n.h3,{id:"delete-records-by-metadata",children:"Delete records by metadata"}),"\n",(0,i.jsxs)(n.p,{children:["To delete records by metadata, ",(0,i.jsx)(n.a,{href:"https://www.pinecone.io/docs/metadata-filtering/#deleting-vectors-by-metadata-filter",children:"pass a metadata filter expression to the delete operation"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>r});var i=a(7294);const t={},d=i.createContext(t);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);