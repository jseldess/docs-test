"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[920],{3147:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>t,metadata:()=>i,toc:()=>o});var r=n(5893),a=n(1151);const t={title:"Sparse-dense vectors",category:"6495c32609a24b00434e5b53"},d=void 0,i={id:"data/hybrid-search-and-sparse-vectors/sparse-dense-vectors",title:"Sparse-dense vectors",description:"Overview",source:"@site/docs/data/hybrid-search-and-sparse-vectors/sparse-dense-vectors.md",sourceDirName:"data/hybrid-search-and-sparse-vectors",slug:"/data/hybrid-search-and-sparse-vectors/sparse-dense-vectors",permalink:"/docs/./data/hybrid-search-and-sparse-vectors/sparse-dense-vectors",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data/hybrid-search-and-sparse-vectors/sparse-dense-vectors.md",tags:[],version:"current",frontMatter:{title:"Sparse-dense vectors",category:"6495c32609a24b00434e5b53"},sidebar:"examplesSidebar",previous:{title:"Querying sparse-dense vectors",permalink:"/docs/./data/hybrid-search-and-sparse-vectors/query-sparse-dense-vectors"},next:{title:"Upserting sparse-dense vectors",permalink:"/docs/./data/hybrid-search-and-sparse-vectors/upsert-sparse-dense-vectors"}},c={},o=[{value:"Overview",id:"overview",level:2},{value:"Sparse-dense vector format",id:"sparse-dense-vector-format",level:2},{value:"Upserting records with sparse-dense values",id:"upserting-records-with-sparse-dense-values",level:2},{value:"Querying records with sparse-dense values",id:"querying-records-with-sparse-dense-values",level:2}];function p(e){const s={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(s.p,{children:["Pinecone supports vectors with sparse and dense values, which allows you to perform ",(0,r.jsx)(s.a,{href:"hybrid-search",children:"hybrid search"}),", or semantic and keyword search over your data in one query and combine the results for more relevant results. This topic describes the sparse-dense vector format in Pinecone."]}),"\n",(0,r.jsxs)(s.p,{children:["To see sparse-dense embeddings in action, see the ",(0,r.jsx)(s.a,{href:"ecommerce-search",children:"Ecommerce hybrid search example"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"sparse-dense-vector-format",children:"Sparse-dense vector format"}),"\n",(0,r.jsxs)(s.p,{children:["Pinecone represents sparse values as a dictionary of two arrays: ",(0,r.jsx)(s.code,{children:"indices"})," and ",(0,r.jsx)(s.code,{children:"values"}),". The elements of ",(0,r.jsx)(s.code,{children:"indices"})," have type ",(0,r.jsx)(s.code,{children:"uint32"}),"; the elements of ",(0,r.jsx)(s.code,{children:"values"})," have type ",(0,r.jsx)(s.code,{children:"float32"}),"."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example"})}),"\n",(0,r.jsx)(s.p,{children:"The following example defines two records with sparse and dense values."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"index = pinecone.Index('example-index') \n\nrecords=[\n    {'id': 'vec1',\n     # The 'values' are dense vector values.\n     'values': [0.1, 0.2, 0.3],\n     'metadata': {'genre': 'drama'},\n     'sparse_values': {\n         'indices': [10, 45, 16],\n         'values': [0.5, 0.5, 0.2]\n     }\n    },\n    {'id': 'vec2',\n     'values': [0.2, 0.3, 0.4],\n     'metadata': {'genre': 'action'},\n     'sparse_values': {\n             # Indices have type uint32 \n             'indices': [15, 40, 11],\n             # Values have type float32\n             'values': [0.4, 0.5, 0.2]\n     }\n    }\n]\n\n"})}),"\n",(0,r.jsx)(s.p,{children:"Pinecone supports sparse vector values of sizes up to 1000 non-zero values and over 4 billion dimensions."}),"\n",(0,r.jsxs)(s.p,{children:["Assuming a dense vector component with 768 dimensions, Pinecone supports roughly 2.8M sparse vectors per ",(0,r.jsx)(s.code,{children:"s1"})," pod or 900k per ",(0,r.jsx)(s.code,{children:"p1"})," pod."]}),"\n",(0,r.jsx)(s.h2,{id:"upserting-records-with-sparse-dense-values",children:"Upserting records with sparse-dense values"}),"\n",(0,r.jsxs)(s.p,{children:["You can upsert these values inside a vector parameter to ",(0,r.jsx)(s.a,{href:"insert-data#upserting-vectors-with-sparse-values",children:"upsert a sparse-dense record"}),"."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Examples"})}),"\n",(0,r.jsx)(s.p,{children:"The following example upserts two vectors with sparse and dense values."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"index = pinecone.Index('example-index') \n\nupsert_response = index.upsert(\n    vectors=[\n        {'id': 'vec1',\n         'values': [0.1, 0.2, 0.3],\n         'metadata': {'genre': 'drama'},\n         'sparse_values': {\n             'indices': [10, 45, 16],\n             'values': [0.5, 0.5, 0.2]\n         }},\n        {'id': 'vec2',\n         'values': [0.2, 0.3, 0.4],\n         'metadata': {'genre': 'action'},\n         'sparse_values': {\n             # Indices have type uint32 \n             'indices': [15, 40, 11],\n             # Values have type float32\n             'values': [0.4, 0.5, 0.2]\n         }}\n    ],\n    namespace='example-namespace'\n)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Pinecone only supports upserting sparse-dense vectors to ",(0,r.jsx)(s.code,{children:"p1"})," and ",(0,r.jsx)(s.code,{children:"s1"})," indexes."]}),"\n",(0,r.jsx)(s.h2,{id:"querying-records-with-sparse-dense-values",children:"Querying records with sparse-dense values"}),"\n",(0,r.jsx)(s.p,{children:"The following example queries an index using a sparse-dense vector."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"query_response = index.query(\n    namespace=\"example-namespace\",\n    top_k=10,\n    vector=[0.1, 0.2, 0.3],\n    sparse_vector={\n        'indices': [10, 45, 16],\n        'values':  [0.5, 0.5, 0.2]\n    }\n)\n"})}),"\n",(0,r.jsx)(s.p,{children:"In order to query an index using sparse values, the index must use the dotproduct metric. Attempting to query any other index with sparse values returns an error.`"}),"\n",(0,r.jsxs)(s.p,{children:["To learn about weighting your sparse and dense vectors in queries, see ",(0,r.jsx)(s.a,{href:"weighting-sparse-and-dense-vectors",children:"Weighting sparse and dense vectors"}),"."]})]})}function l(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>i,a:()=>d});var r=n(7294);const a={},t=r.createContext(a);function d(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);