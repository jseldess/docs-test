"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5708],{7932:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=a(5893),r=a(1151);const s={title:"Filtering with metadata",category:"6495c32609a24b00434e5b53"},i=void 0,d={id:"data/metadata-filtering",title:"Filtering with metadata",description:"You can limit your vector search based on metadata. Pinecone lets you attach metadata key-value pairs to vectors in an index, and specify filter expressions when you query the index.",source:"@site/versioned_docs/version-legacy/data/metadata-filtering.md",sourceDirName:"data",slug:"/data/metadata-filtering",permalink:"/docs/legacy/data/metadata-filtering",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-legacy/data/metadata-filtering.md",tags:[],version:"legacy",frontMatter:{title:"Filtering with metadata",category:"6495c32609a24b00434e5b53"},sidebar:"examplesSidebar",previous:{title:"Manage data",permalink:"/docs/legacy/data/manage-data"},next:{title:"Query data",permalink:"/docs/legacy/data/query-data"}},o={},l=[{value:"Supported metadata types",id:"supported-metadata-types",level:2},{value:"Supported metadata size",id:"supported-metadata-size",level:2},{value:"Metadata query language",id:"metadata-query-language",level:2},{value:"Using arrays of strings as metadata values or as metadata filters",id:"using-arrays-of-strings-as-metadata-values-or-as-metadata-filters",level:3},{value:"Inserting metadata into an index",id:"inserting-metadata-into-an-index",level:2},{value:"Querying an index with metadata filters",id:"querying-an-index-with-metadata-filters",level:2},{value:"More example filter expressions",id:"more-example-filter-expressions",level:3},{value:"Deleting vectors by metadata filter",id:"deleting-vectors-by-metadata-filter",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"You can limit your vector search based on metadata. Pinecone lets you attach metadata key-value pairs to vectors in an index, and specify filter expressions when you query the index."}),"\n",(0,t.jsx)(n.p,{children:"Searches with metadata filters retrieve exactly the number of nearest-neighbor results that match the filters. For most cases, the search latency will be even lower than unfiltered searches."}),"\n",(0,t.jsxs)(n.p,{children:["Searches without metadata filters do not consider metadata. To combine keywords with semantic search, see ",(0,t.jsx)(n.a,{href:"hybrid-search",children:"sparse-dense embeddings"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For more background information on metadata filtering, see: ",(0,t.jsx)(n.a,{href:"https://www.pinecone.io/learn/vector-search-filtering/",children:"The Missing WHERE Clause in Vector Search"}),"."]}),"\n",(0,t.jsx)("html",{children:(0,t.jsx)("iframe",{width:"450",height:"253",src:"https://www.youtube.com/embed/tn_Y19oB5bs",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})}),"\n",(0,t.jsx)(n.h2,{id:"supported-metadata-types",children:"Supported metadata types"}),"\n",(0,t.jsx)(n.p,{children:"You can associate a metadata payload with each vector in an index, as key-value pairs in a JSON object where keys are strings and values are one of:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"String"}),"\n",(0,t.jsx)(n.li,{children:"Number (integer or floating point, gets converted to a 64 bit floating point)"}),"\n",(0,t.jsx)(n.li,{children:"Booleans (true, false)"}),"\n",(0,t.jsx)(n.li,{children:"List of String"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u2139\ufe0f Note"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"High cardinality consumes more memory:"})," Pinecone indexes metadata to allow\nfor filtering. If the metadata contains many unique values \u2014 such as a unique\nidentifier for each vector \u2014 the index will consume significantly more\nmemory. Consider using ",(0,t.jsx)(n.a,{href:"manage-indexes/#selective-metadata-indexing",children:"selective metadata indexing"})," to avoid indexing\nhigh-cardinality metadata that is not needed for filtering."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u26a0\ufe0f Warning"}),"\n",(0,t.jsx)(n.p,{children:"Null metadata values are not supported. Instead of setting a key to hold a\nnull value, we recommend you remove that key from the metadata payload."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example, the following would be valid metadata payloads:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "genre": "action",\n    "year": 2020,\n    "length_hrs": 1.5\n}\n\n{\n    "color": "blue",\n    "fit": "straight",\n    "price": 29.99,\n    "is_jeans": true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"supported-metadata-size",children:"Supported metadata size"}),"\n",(0,t.jsx)(n.p,{children:"Pinecone supports 40kb of metadata per vector."}),"\n",(0,t.jsx)(n.h2,{id:"metadata-query-language",children:"Metadata query language"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u2139\ufe0f Note"}),"\n",(0,t.jsxs)(n.p,{children:["Pinecone's filtering query language is based on ",(0,t.jsx)(n.a,{href:"https://docs.mongodb.com/manual/reference/operator/query/",children:"MongoDB's query and projection operators"}),". We\ncurrently support a subset of those selectors."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The metadata filters can be combined with AND and OR:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$eq"})," - Equal to ",(0,t.jsx)(n.em,{children:"(number, string, boolean)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$ne"})," - Not equal to ",(0,t.jsx)(n.em,{children:"(number, string, boolean)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$gt"})," - Greater than ",(0,t.jsx)(n.em,{children:"(number)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$gte"})," - Greater than or equal to ",(0,t.jsx)(n.em,{children:"(number)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$lt"})," - Less than ",(0,t.jsx)(n.em,{children:"(number)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$lte"})," - Less than or equal to ",(0,t.jsx)(n.em,{children:"(number)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$in"})," - In array ",(0,t.jsx)(n.em,{children:"(string or number)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$nin"})," - Not in array ",(0,t.jsx)(n.em,{children:"(string or number)"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"using-arrays-of-strings-as-metadata-values-or-as-metadata-filters",children:"Using arrays of strings as metadata values or as metadata filters"}),"\n",(0,t.jsx)(n.p,{children:"A vector with metadata payload..."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{ "genre": ["comedy", "documentary"] }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["...means the ",(0,t.jsx)(n.code,{children:'"genre"'})," takes on both values."]}),"\n",(0,t.jsx)(n.p,{children:"For example, queries with the following filters will match the vector:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"genre":"comedy"}\n\n{"genre": {"$in":["documentary","action"]}}\n\n{"$and": [{"genre": "comedy"}, {"genre":"documentary"}]}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Queries with the following filter will ",(0,t.jsx)(n.strong,{children:"not"})," match the vector:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{ "$and": [{ "genre": "comedy" }, { "genre": "drama" }] }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And queries with the following filters will ",(0,t.jsx)(n.strong,{children:"not"})," match the vector because they are invalid. They will result in a query compilation error:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# INVALID QUERY:\n{"genre": ["comedy", "documentary"]}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# INVALID QUERY:\n{"genre": {"$eq": ["comedy", "documentary"]}}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"inserting-metadata-into-an-index",children:"Inserting metadata into an index"}),"\n",(0,t.jsx)(n.p,{children:"Metadata can be included in upsert requests as you insert your vectors."}),"\n",(0,t.jsx)(n.p,{children:"For example, here's how to insert vectors with metadata representing movies into an index:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import pinecone\n\npinecone.init(api_key="your-api-key", environment="us-west1-gcp")\nindex = pinecone.Index("example-index")\n\nindex.upsert([\n    ("A", [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], {"genre": "comedy", "year": 2020}),\n    ("B", [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2], {"genre": "documentary", "year": 2019}),\n    ("C", [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3], {"genre": "comedy", "year": 2019}),\n    ("D", [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4], {"genre": "drama"}),\n    ("E", [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], {"genre": "drama"})\n])\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'await index.upsert({\n  vectors: [\n    {\n      id: "A",\n      values: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],\n      metadata: { genre: "comedy", year: 2020 },\n    },\n    {\n      id: "B",\n      values: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2],\n      metadata: { genre: "documentary", year: 2019 },\n    },\n    {\n      id: "C",\n      values: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],\n      metadata: { genre: "comedy", year: 2019 },\n    },\n    {\n      id: "D",\n      values: [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4],\n      metadata: { genre: "drama" },\n    },\n    {\n      id: "E",\n      values: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n      metadata: { genre: "drama" },\n    },\n  ],\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'curl -i -X POST https://YOUR_INDEX-YOUR_PROJECT.svc.YOUR_ENVIRONMENT.pinecone.io/vectors/upsert \\\n  -H \'Api-Key: YOUR_API_KEY\' \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n    "vectors": [\n      {\n        "id": "A",\n        "values": [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],\n        "metadata": {"genre": "comedy", "year": 2020}\n      },\n      {\n        "id": "B",\n        "values": [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2],\n        "metadata": {"genre": "documentary", "year": 2019}\n      },\n      {\n        "id": "C",\n        "values": [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],\n        "metadata": {"genre": "comedy", "year": 2019}\n      },\n      {\n        "id": "D",\n        "values": [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4],\n        "metadata": {"genre": "drama"}\n      },\n      {\n        "id": "E",\n        "values": [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n        "metadata": {"genre": "drama"}\n      }\n    ]\n  }\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Projects on the ",(0,t.jsx)(n.code,{children:"gcp-starter"})," environment do not support metadata strings containing the character ",(0,t.jsx)(n.code,{children:"\u0394"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"querying-an-index-with-metadata-filters",children:"Querying an index with metadata filters"}),"\n",(0,t.jsx)(n.p,{children:"Metadata filter expressions can be included with queries to limit the search to only vectors matching the filter expression."}),"\n",(0,t.jsxs)(n.p,{children:["For example, we can search the previous movies index for documentaries from the year 2019. This also uses the ",(0,t.jsx)(n.code,{children:"include_metadata"})," flag so that vector metadata is included in the response."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u26a0\ufe0f Warning"}),"\n",(0,t.jsxs)(n.p,{children:["For performance reasons, do not return vector data and metadata when\n",(0,t.jsx)(n.code,{children:"top_k>1000"}),". Queries with ",(0,t.jsx)(n.code,{children:"top_k"})," over 1000 should not contain\n",(0,t.jsx)(n.code,{children:"include_metadata=True"})," or ",(0,t.jsx)(n.code,{children:"include_data=True"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"index.query(\n    vector=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],\n    filter={\n        \"genre\": {\"$eq\": \"documentary\"},\n        \"year\": 2019\n    },\n    top_k=1,\n    include_metadata=True\n)\n\n# Returns:\n# {'matches': [{'id': 'B',\n#               'metadata': {'genre': 'documentary', 'year': 2019.0},\n#               'score': 0.0800000429,\n#               'values': []}],\n#  'namespace': ''}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const queryResponse = await index.query({\n  vector: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],\n  filter: { genre: { $in: [\"comedy\", \"documentary\", \"drama\"] } },\n  topK: 1,\n  includeMetadata: true,\n});\nconsole.log(queryResponse.data);\n// Returns:\n// {'matches': [{'id': 'B',\n//               'metadata': {'genre': 'documentary', 'year': 2019.0},\n//               'score': 0.0800000429,\n//               'values': []}],\n//  'namespace': ''}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'curl -i -X POST https://YOUR_INDEX-YOUR_PROJECT.svc.YOUR_ENVIRONMENT.pinecone.io/query \\\n  -H \'Api-Key: YOUR_API_KEY\' \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n    "vector": [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],\n    "filter": {"genre": {"$in": ["comedy", "documentary", "drama"]}},\n    "topK": 1,\n    "includeMetadata": true\n  }\'\n\n# Output:\n# {\n#       "matches": [\n#         {\n#           "id": "B",\n#           "score": 0.0800000429,\n#           "values": [],\n#           "metadata": {\n#             "genre": "documentary",\n#             "year": 2019\n#           }\n#         }\n#       ],\n#       "namespace": ""\n#     }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"more-example-filter-expressions",children:"More example filter expressions"}),"\n",(0,t.jsx)(n.p,{children:"A comedy, documentary, or drama:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "genre": { "$in": ["comedy", "documentary", "drama"] }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"A drama from 2020:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "genre": { "$eq": "drama" },\n  "year": { "$gte": 2020 }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"A drama from 2020 (equivalent to the previous example):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "$and": [{ "genre": { "$eq": "drama" } }, { "year": { "$gte": 2020 } }]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"A drama or a movie from 2020:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "$or": [{ "genre": { "$eq": "drama" } }, { "year": { "$gte": 2020 } }]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"deleting-vectors-by-metadata-filter",children:"Deleting vectors by metadata filter"}),"\n",(0,t.jsx)(n.p,{children:"To specify vectors to be deleted by metadata values, pass a metadata filter expression to the delete operation. This deletes all vectors matching the metadata filter expression."}),"\n",(0,t.jsxs)(n.p,{children:["Projects in the ",(0,t.jsx)(n.code,{children:"gcp-starter"})," region do not support deleting by metadata."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.p,{children:'This example deletes all vectors with genre "documentary" and year 2019 from an index.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'index.delete(\n    filter={\n        "genre": {"$eq": "documentary"},\n        "year": 2019\n    }\n)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'await index._delete({\n  deleteRequest: {\n    filter: {\n    genre: { $eq: "documentary" },\n    year: 2019,\n  }\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",metastring:"curl",children:'curl -i -X POST https://YOUR_INDEX-YOUR_PROJECT.svc.YOUR_ENVIRONMENT.pinecone.io/vectors/delete \\\n  -H \'Api-Key: YOUR_API_KEY\' \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n    "filter": {"genre": {"$in": ["comedy", "documentary", "drama"]}}\n  }\'\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>d,a:()=>i});var t=a(7294);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);